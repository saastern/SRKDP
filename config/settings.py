"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import dj_database_url
from datetime import timedelta
import re  # Added for database URL fix

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')

# =============================================================================
# CORE SETTINGS
# =============================================================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True').lower() == 'true'

# ALLOWED_HOSTS - Critical fix for Railway
# -----------------------------------------------------------------------------
ALLOWED_HOSTS = ['*']  # Temporary wide-open for debugging

# =============================================================================
# SECURITY SETTINGS (Updated for Railway)
# =============================================================================

# Railway proxy configuration (CRITICAL FIX)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# SSL Settings - use environment variable
SECURE_SSL_REDIRECT = os.getenv('DJANGO_SSL_REDIRECT', 'False').lower() == 'true'

if not DEBUG:  # Production settings
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
else:  # Development settings
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_HSTS_SECONDS = 0

# Always enable these security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# CSRF Trusted Origins (Required for POST requests)
if not DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        'https://srkdp-production.up.railway.app',
        'https://*.railway.app'
    ]

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'apps.users',
    'apps.teachers',
    'apps.students',
    'apps.attendance',
    'apps.fees',
    'apps.notifications',
    'apps.assessments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# =============================================================================
# DATABASE CONFIGURATION (Fixed for Railway)
# =============================================================================

# Fix DATABASE_URL format if needed (Railway uses postgresql://, Django needs postgres://)
db_url = os.getenv('DATABASE_URL', '')
if db_url.startswith('postgresql://'):
    os.environ['DATABASE_URL'] = db_url.replace('postgresql://', 'postgres://', 1)
    print("üîß Fixed DATABASE_URL scheme")

# Database configuration
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    print(f"üóÑÔ∏è Using Railway PostgreSQL database")
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'srkdb_1'),
            'USER': os.getenv('DB_USER', 'admin1'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'admin'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
    print(f"üóÑÔ∏è Using local database: {DATABASES['default']['NAME']}")

# =============================================================================
# PASSWORD VALIDATION
# =============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 8},
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# =============================================================================
# STATIC FILES (CRITICAL FIXES FOR DEPLOYMENT)
# =============================================================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Create staticfiles directory if it doesn't exist
if not os.path.exists(STATIC_ROOT):
    os.makedirs(STATIC_ROOT)
    print(f"üìÅ Created staticfiles directory at {STATIC_ROOT}")

# Static files directories
STATICFILES_DIRS = []
if (BASE_DIR / 'static').exists():
    STATICFILES_DIRS = [BASE_DIR / 'static']

# Use simpler storage in production
if not DEBUG:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
else:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Admin static files fallback
ADMIN_MEDIA_PREFIX = '/static/admin/'

# =============================================================================
# DEFAULT PRIMARY KEY FIELD
# =============================================================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =============================================================================
# CUSTOM USER MODEL
# =============================================================================

AUTH_USER_MODEL = 'users.User'

# =============================================================================
# DJANGO REST FRAMEWORK
# =============================================================================

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    }
}

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# CORS Origins - Development and Production
cors_origins = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:8000,http://192.168.1.6:3000')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins.split(',')]

# CORS Settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only allow all origins in development

# CORS Headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Production CORS Override
if not DEBUG:
    production_origins = os.getenv('PRODUCTION_CORS_ORIGINS')
    if production_origins:
        CORS_ALLOWED_ORIGINS = [origin.strip() for origin in production_origins.split(',')]

# =============================================================================
# SIMPLE JWT CONFIGURATION
# =============================================================================

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'] if DEBUG else ['console', 'file'],
            'level': 'INFO',
        },
        'apps': {
            'handlers': ['console'] if DEBUG else ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
    },
}

# =============================================================================
# PRODUCTION TEMPLATE FIXES (CRITICAL FOR DEPLOYMENT)
# =============================================================================

# Template caching for production
if not DEBUG:
    TEMPLATES[0]['OPTIONS']['loaders'] = [
        ('django.template.loaders.cached.Loader', [
            'django.template.loaders.filesystem.Loader',
            'django.template.loaders.app_directories.Loader',
        ]),
    ]
    print("üîß Configured cached template loaders for production")

# =============================================================================
# RAILWAY DEPLOYMENT CHECKS
# =============================================================================

# Add this to see what's happening in Railway logs
print("\n" + "="*80)
print(f"üîß DEBUG: {DEBUG}")
print(f"üîß ALLOWED_HOSTS: {ALLOWED_HOSTS}")
print(f"üîß DATABASE_URL present: {bool(os.getenv('DATABASE_URL'))}")
print(f"üîß SECURE_PROXY_SSL_HEADER: {SECURE_PROXY_SSL_HEADER}")
print(f"üîß SECURE_SSL_REDIRECT: {SECURE_SSL_REDIRECT}")
print(f"üîß CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS if not DEBUG else 'N/A'}")
print(f"üîß STATIC_ROOT: {STATIC_ROOT}")
print(f"üîß STATICFILES_STORAGE: {STATICFILES_STORAGE}")
print("="*80 + "\n")



# =============================================================================
# AUTO SUPERUSER CREATION (For Railway Deployment)
# =============================================================================

import os
if not DEBUG and os.environ.get('AUTO_CREATE_SUPERUSER', 'False').lower() == 'true':
    from django.contrib.auth import get_user_model
    from django.db.utils import OperationalError, ProgrammingError
    from django.db import connection
    import time
    
    # Wait for database to be ready
    max_retries = 5
    retry_delay = 2  # seconds
    
    for i in range(max_retries):
        try:
            # Try to execute a simple query to check if database is ready
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            break
        except (OperationalError, ProgrammingError):
            if i < max_retries - 1:
                print(f"‚ö†Ô∏è Database not ready, retrying in {retry_delay} seconds...")
                time.sleep(retry_delay)
            else:
                print("‚ùå Could not connect to database after multiple attempts")
                break
    else:
        try:
            User = get_user_model()
            username = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'admin')
            email = os.environ.get('DJANGO_SUPERUSER_EMAIL', 'admin@example.com')
            password = os.environ.get('DJANGO_SUPERUSER_PASSWORD', 'admin123')
            
            if not User.objects.filter(username=username).exists():
                User.objects.create_superuser(
                    username=username,
                    email=email,
                    password=password
                )
                print(f"‚úÖ Superuser '{username}' created successfully")
            else:
                print(f"‚ÑπÔ∏è Superuser '{username}' already exists")
        except Exception as e:
            print(f"‚ùå Error creating superuser: {e}")
# =============================================================================
# DATABASE CONNECTION FIX (Add this to settings.py)
# =============================================================================

import time
from django.db import connections
from django.db.utils import OperationalError

# Wait for database to be ready (more robust version)
def wait_for_db():
    """Wait for database to become available"""
    max_retries = 10
    retry_delay = 5  # seconds
    
    for i in range(max_retries):
        try:
            # Try to connect to all databases
            for conn_name in connections:
                connection = connections[conn_name]
                if connection.vendor == 'postgresql':
                    with connection.cursor() as cursor:
                        cursor.execute("SELECT 1")
            print("‚úÖ Database connection established")
            return True
        except OperationalError as e:
            if i < max_retries - 1:
                print(f"‚ö†Ô∏è Database not ready (attempt {i+1}/{max_retries}): {e}")
                time.sleep(retry_delay)
            else:
                print(f"‚ùå Could not connect to database after {max_retries} attempts: {e}")
                return False

# Call this function during startup
if not DEBUG:
    wait_for_db()
