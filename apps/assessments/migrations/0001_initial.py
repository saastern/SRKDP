# Generated by Django 5.2.4 on 2025-08-31 14:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0003_class_class_group'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('exam_type', models.CharField(choices=[('FA', 'Formative Assessment'), ('SA', 'Summative Assessment')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=50)),
                ('entity_type', models.CharField(max_length=50)),
                ('entity_id', models.IntegerField()),
                ('payload_snapshot', models.JSONField(default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BulkUploadJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.FileField(upload_to='bulk_uploads/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('errors_json', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('is_optional', models.BooleanField(default=False)),
                ('class_assigned', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.class')),
            ],
            options={
                'unique_together': {('code', 'class_assigned')},
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_marks', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('max_total_marks', models.DecimalField(decimal_places=2, default=0, max_digits=7)),
                ('percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('average_gp', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('final_grade', models.CharField(blank=True, max_length=2)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('computed_at', models.DateTimeField(auto_now=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.studentprofile')),
            ],
            options={
                'indexes': [models.Index(fields=['student'], name='assessments_student_b7effd_idx'), models.Index(fields=['rank'], name='assessments_rank_62e01c_idx'), models.Index(fields=['-percentage'], name='assessments_percent_bb3f06_idx')],
            },
        ),
        migrations.CreateModel(
            name='Mark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('marks_obtained', models.DecimalField(decimal_places=2, max_digits=5)),
                ('grade', models.CharField(blank=True, max_length=2)),
                ('grade_point', models.DecimalField(decimal_places=2, default=0, max_digits=4)),
                ('is_absent', models.BooleanField(default=False)),
                ('entered_at', models.DateTimeField(auto_now_add=True)),
                ('entered_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('exam', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.exam')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.studentprofile')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='assessments.subject')),
            ],
            options={
                'indexes': [models.Index(fields=['student'], name='assessments_student_81d817_idx'), models.Index(fields=['subject', 'exam'], name='assessments_subject_2e2943_idx')],
                'unique_together': {('student', 'subject', 'exam')},
            },
        ),
        migrations.CreateModel(
            name='TeacherClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_assigned', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.class')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('teacher', 'class_assigned')},
            },
        ),
    ]
